import logging

def generate_report(nmap_data, metasploit_data, output_report):
    """Generate a penetration test report.

    Args:
        nmap_data (list): Parsed Nmap data.
        metasploit_data (list): Parsed Metasploit data.
        output_report (str): Path where the report will be saved.
    
    Raises:
        IOError: If there is an error writing the report.
    """
    try:
        with open(output_report, 'w') as report_file:
            report_file.write("<!DOCTYPE html>\n<html lang='en'>\n<head>\n")
            report_file.write("<meta charset='UTF-8'>\n")
            report_file.write("<meta name='viewport' content='width=device-width, initial-scale=1.0'>\n")
            report_file.write("<title>Penetration Test Report</title>\n")
            report_file.write("<style>\n")
            report_file.write("body { font-family: Arial, sans-serif; margin: 20px; }\n")
            report_file.write("h1, h2 { color: #333; }\n")
            report_file.write("table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n")
            report_file.write("th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n")
            report_file.write("th { background-color: #f4f4f4; }\n")
            report_file.write(".severity { padding: 4px; border-radius: 4px; color: #fff; font-weight: bold; }\n")
            report_file.write(".low { background-color: green; }\n")
            report_file.write(".medium { background-color: orange; }\n")
            report_file.write(".high { background-color: red; }\n")
            report_file.write(".critical { background-color: darkred; }\n")
            report_file.write("</style>\n</head>\n<body>\n")
            report_file.write("<h1>Penetration Test Report</h1>\n")

            # Nmap results
            report_file.write("<h2>Nmap Scan Results</h2>\n<table>\n<thead>\n<tr>\n")
            report_file.write("<th>IP Address</th>\n<th>Port</th>\n<th>Service</th>\n<th>Severity</th>\n</tr>\n</thead>\n<tbody>\n")
            for entry in nmap_data:
                report_file.write(f"<tr>\n<td>{entry['ip']}</td>\n<td>{entry['port']}</td>\n<td>{entry['service']}</td>\n")
                report_file.write(f"<td><span class='severity {entry['severity'].lower()}'>{entry['severity']}</span></td>\n</tr>\n")
            report_file.write("</tbody>\n</table>\n")

            # Metasploit results
            report_file.write("<h2>Metasploit Vulnerabilities</h2>\n<table>\n<thead>\n<tr>\n")
            report_file.write("<th>IP Address</th>\n<th>Vulnerability</th>\n<th>Severity</th>\n<th>Remediation</th>\n</tr>\n</thead>\n<tbody>\n")
            for entry in metasploit_data:
                report_file.write(f"<tr>\n<td>{entry['ip']}</td>\n<td>{entry['vulnerability']}</td>\n")
                report_file.write(f"<td><span class='severity {entry['severity'].lower()}'>{entry['severity']}</span></td>\n")
                report_file.write(f"<td>{entry['remediation']}</td>\n</tr>\n")
            report_file.write("</tbody>\n</table>\n</body>\n</html>")
    
    except IOError as e:
        logging.error(f"Error writing the report: {e}")
        raise IOError("Failed to write the report.")
    
    logging.info(f"Report successfully generated at {output_report}.")
