import sys
import logging
from Parser import parse_nmap_output, parse_metasploit_output
from ReportGenerator import generate_report

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("report_generator.log")
    ]
)

def main(nmap_file, metasploit_file, output_report):
    """Main function to parse Nmap and Metasploit outputs and generate a report.

    Args:
        nmap_file (str): Path to the Nmap output file.
        metasploit_file (str): Path to the Metasploit output file.
        output_report (str): Path where the generated report will be saved.
    """
    # Parse Nmap and Metasploit outputs
    logging.info("Parsing Nmap and Metasploit outputs...")
    try:
        nmap_data = parse_nmap_output(nmap_file)
        metasploit_data = parse_metasploit_output(metasploit_file)
        logging.info("Parsing completed successfully.")
    except Exception as e:
        logging.error(f"Error parsing files: {e}")
        sys.exit(1)

    # Generate the report
    try:
        generate_report(nmap_data, metasploit_data, output_report)
        logging.info(f"Report generated successfully: {output_report}")
    except Exception as e:
        logging.error(f"Error generating report: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # Ensure correct number of command line arguments
    if len(sys.argv) != 4:
        print("Usage: python Main.py <nmap_output> <metasploit_output> <output_report>")
        sys.exit(1)

    # Run the main function with provided arguments
    main(sys.argv[1], sys.argv[2], sys.argv[3])
