import logging

def parse_nmap_output(nmap_file):
    """Parse the Nmap output file and return structured data.

    Args:
        nmap_file (str): Path to the Nmap output file.

    Returns:
        list: A list of dictionaries with parsed Nmap data.

    Raises:
        ValueError: If the Nmap output is invalid.
    """
    nmap_data = []
    try:
        with open(nmap_file, 'r') as file:
            # Parsing logic here
            # This is just a placeholder; replace with actual parsing
            for line in file:
                # Example parsing (this needs to be implemented)
                if "open" in line:  # Simple check for open ports
                    parts = line.split()
                    nmap_data.append({
                        'ip': parts[0],  # Example
                        'port': parts[1],
                        'service': parts[2],
                        'severity': 'low'  # Set severity based on your logic
                    })
    except Exception as e:
        logging.error(f"Error parsing Nmap output: {e}")
        raise ValueError("Invalid Nmap output format or file not found.")
    
    logging.info(f"Parsed {len(nmap_data)} entries from Nmap output.")
    return nmap_data

def parse_metasploit_output(metasploit_file):
    """Parse the Metasploit output file and return structured data.

    Args:
        metasploit_file (str): Path to the Metasploit output file.

    Returns:
        list: A list of dictionaries with parsed Metasploit data.

    Raises:
        ValueError: If the Metasploit output is invalid.
    """
    metasploit_data = []
    try:
        with open(metasploit_file, 'r') as file:
            # Parsing logic here
            # This is just a placeholder; replace with actual parsing
            for line in file:
                # Example parsing
                if "Vulnerable" in line:  # Simple check for vulnerabilities
                    parts = line.split()
                    metasploit_data.append({
                        'ip': parts[0],  # Example
                        'vulnerability': parts[1],
                        'severity': 'high',  # Set severity based on your logic
                        'remediation': 'Patch the vulnerability'  # Example remediation
                    })
    except Exception as e:
        logging.error(f"Error parsing Metasploit output: {e}")
        raise ValueError("Invalid Metasploit output format or file not found.")
    
    logging.info(f"Parsed {len(metasploit_data)} entries from Metasploit output.")
    return metasploit_data
