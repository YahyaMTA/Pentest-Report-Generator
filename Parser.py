import re

def parse_nmap_output(file):
    nmap_data = []
    try:
        with open(file, 'r') as f:
            content = f.read()
            # Extract IPs, open ports, and services
            pattern = r"([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*open.*?(\d+/tcp).*?(\S+)"
            matches = re.findall(pattern, content)

            for match in matches:
                ip, port, service = match
                nmap_data.append({
                    'ip': ip,
                    'port': port,
                    'service': service,
                    'severity': classify_service(service)  # Add severity based on service
                })
    except Exception as e:
        print(f"Error reading Nmap output: {e}")
        raise
    return nmap_data

def parse_metasploit_output(file):
    metasploit_data = []
    try:
        with open(file, 'r') as f:
            content = f.read()
            # Extract vulnerabilities and IPs
            pattern = r"VULNERABILITY:\s+(.*)\nHOST:\s+([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)"
            matches = re.findall(pattern, content)

            for match in matches:
                vulnerability, ip = match
                metasploit_data.append({
                    'vulnerability': vulnerability,
                    'ip': ip,
                    'severity': classify_vulnerability(vulnerability),  # Add severity based on vulnerability
                    'remediation': suggest_remediation(vulnerability)   # Add remediation
                })
    except Exception as e:
        print(f"Error reading Metasploit output: {e}")
        raise
    return metasploit_data

def classify_service(service):
    # Simple logic to classify services by severity
    if "http" in service or "ssh" in service:
        return "High"
    elif "ftp" in service or "smtp" in service:
        return "Medium"
    return "Low"

def classify_vulnerability(vulnerability):
    # Basic severity classification logic for vulnerabilities
    if "buffer overflow" in vulnerability.lower():
        return "Critical"
    elif "sql injection" in vulnerability.lower():
        return "High"
    elif "xss" in vulnerability.lower():
        return "Medium"
    return "Low"
